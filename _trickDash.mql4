#property indicator_chart_window

extern string	PairsToTrade = "EURUSD,GBPUSD,AUDUSD,NZDUSD,USDJPY,USDCHF,USDCAD,XAUUSD,EURAUD,GBPAUD,EURGBP,GBPCHF,EURJPY,GBPJPY,CADJPY,NZDJPY,AUDJPY,CHFJPY,EURCHF,AUDNZD,AUDCAD,AUDCHF,CADCHF,EURCAD,GBPCAD,GBPNZD,EURNZD,NZDCAD,NZDCHF";
extern string	PeriodsToTrade = "M5,M15,M30,H1,H4,D1"; // Time Frames to display are user defined

extern string	pdi="----Pair display inputs----";
extern int		FontSize=10;
extern color	FontColour=Black;
extern string	Font_Font = "Lucida Sans Unicode";
extern double	DisplayStarts_X=5;	//we positioning the object from the top right corner of window
extern double	DisplayStarts_Y=15;
extern bool    alertOn = true;
extern string  PairsToIgnoreAlert = "";


int	symbolCodeSUP=233,
		symbolCodeSDN=234,
		symbolCodeWUP=236,
		symbolCodeWDN=238,
		symbolCodeNoSignal=159;
color	colorCodeSUP=LimeGreen,
		colorCodeSDN=Red,
		colorCodeWUP=DeepSkyBlue,
		colorCodeWDN=Magenta,
		colorCodeNoSignal=Gold;

//Pair extraction
int		NoOfPairs;				// Holds the number of pairs passed by the user via the inputs screen
int		NoOfPeriods;			// Holds the number of periods passed by the user via the inputs screen
string	TradePair[];			//Array to hold the pairs traded by the user
string	TradePeriod[];			//Array to hold the periods traded by the user
int		TradePeriodTF[];		//Array to hold the periods traded by the user
int      NoOfIgnores;
string   AlertIgnorePairs[];  // Array to hold the pairs that wont raise an alert
int		TradeTrendSymbol[][6];	//Array to hold the pairs trend symbol
color 	TradeTrendColor[][6];	//Array to hold the pairs trend color

int WindowNo = 0;

//+------------------------------------------------------------------+
string objPrefix ;	// all objects drawn by this indicator will be prefixed with this
string buff_str ;	// all objects drawn by this indicator will be prefixed with this
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| expert initialization function                                   |
//+------------------------------------------------------------------+
int init()
{

	int j;
	objPrefix = WindowExpertName();

	//Extract the pairs traded by the user
	NoOfPairs = StringFindCount(PairsToTrade,",")+1;
	ArrayResize(TradePair, NoOfPairs);
	string AddChar = StringSubstr(Symbol(),6,4);
	StrPairToStringArray(PairsToTrade, TradePair, AddChar);
	
   NoOfIgnores = StringFindCount(PairsToIgnoreAlert,",")+1;
	ArrayResize(AlertIgnorePairs, NoOfIgnores);
	StrPairToStringArray(PairsToIgnoreAlert, AlertIgnorePairs, AddChar);
  
	NoOfPeriods = StringFindCount(PeriodsToTrade, ",")+1;
	ArrayResize(TradePeriod, NoOfPeriods);
	ArrayResize(TradePeriodTF, NoOfPeriods);
	StrToStringArray(PeriodsToTrade, TradePeriod);
	
	for(j=0; j<NoOfPeriods; j++)
	{
		TradePeriodTF[j] = StrToTF(TradePeriod[j]);	//this is for display Periods from topleft corner
		//TradePeriodTF[NoOfPeriods-j] = StrToTF(TradePeriod[j]);	//this is for display Periods from topright corner
	}

	ArrayResize(TradeTrendSymbol, NoOfPairs);
	ArrayInitialize(TradeTrendSymbol, symbolCodeNoSignal);		// Inizialize the array with symbolCodeNoSignal
	ArrayResize(TradeTrendColor, NoOfPairs);
	ArrayInitialize(TradeTrendColor, colorCodeNoSignal);		// Inizialize the array with colorCodeNoSignal

	return(0);
}// End init()


int deinit()
{
	Comment("");   
	RemoveObjects(objPrefix);
	return(0);
}// End deinit()

bool NewBar()
{
   static datetime lastbar;
   datetime curbar = Time[0];
   if(lastbar!=curbar)
   {
     lastbar=curbar;
     return (true);
   }
   else
   {
     return(false);
   }
}

//+------------------------------------------------------------------+
//| expert start function                                            |
//+------------------------------------------------------------------+
int start()
{
   if ( NewBar() ){
     Print("NEWBAR!");
     GetPairTrends(TradeTrendSymbol, TradeTrendColor);
     PrintPairTrends();
   }
   return(0);
}//End start()


//-------------------------------------------------------------------+
// RemoveObjects                                                     |
//-------------------------------------------------------------------+
void RemoveObjects(string Pref)
{   
	int i;
	string objname = "";

	for (i = ObjectsTotal(); i >= 0; i--)
	{
		objname = ObjectName(i);
		if (StringFind(objname, Pref, 0) > -1) ObjectDelete(objname);
	}
	return;
} // End void RemoveObjects(string Pref)


//+------------------------------------------------------------------+
// StringFindCount                                                   |
//+------------------------------------------------------------------+
int StringFindCount(string str, string str2)
// Returns the number of occurrences of STR2 in STR
// Usage:   int x = StringFindCount("ABCDEFGHIJKABACABB","AB")   returns x = 3
{
  int c = 0;
  for (int i=0; i<StringLen(str); i++)
    if (StringSubstr(str,i,StringLen(str2)) == str2)  c++;
  return(c);
} // End int StringFindCount(string str, string str2)

//+------------------------------------------------------------------+
// StrPairToStringArray                                                  |
//+------------------------------------------------------------------+
void StrPairToStringArray(string str, string &a[], string p_suffix, string delim=",")
{
	int z1=-1, z2=0;
	for (int i=0; i<ArraySize(a); i++)
	{
		z2 = StringFind(str,delim,z1+1);
		a[i] = StringSubstr(str,z1+1,z2-z1-1) + p_suffix;
		if (z2 >= StringLen(str)-1)   break;
		z1 = z2;
	}
	return;
} // End void StrPairToStringArray(string str, string &a[], string p_suffix, string delim=",") 

//+------------------------------------------------------------------+
// StrToStringArray                                                  |
//+------------------------------------------------------------------+
void StrToStringArray(string str, string &a[], string delim=",")
{
	int z1=-1, z2=0;
	for (int i=0; i<ArraySize(a); i++)
	{
		z2 = StringFind(str,delim,z1+1);
		a[i] = StringSubstr(str,z1+1,z2-z1-1);
		if (z2 >= StringLen(str)-1)   break;
		z1 = z2;
	}
	return;
} // End void StrToStringArray(string str, string &a[], string delim=",") 

//+------------------------------------------------------------------+
// StrToTF(string str)                                               |
//+------------------------------------------------------------------+
// Converts a timeframe string to its MT4-numeric value
// Usage:   int x=StrToTF("M15")   returns x=15
int StrToTF(string str)
{
  str = StringUpper(str);
  str = StringTrimLeft(str);
  str = StringTrimRight(str);
  
  if (str == "M1")   return(1);
  if (str == "M5")   return(5);
  if (str == "M15")  return(15);
  if (str == "M30")  return(30);
  if (str == "H1")   return(60);
  if (str == "H4")   return(240);
  if (str == "D1")   return(1440);
  if (str == "W1")   return(10080);
  if (str == "MN")   return(43200);
  return(0);
}  

//+------------------------------------------------------------------+
// StringUpper(string str)                                           |
//+------------------------------------------------------------------+
// Converts any lowercase characters in a string to uppercase
// Usage:    string x=StringUpper("The Quick Brown Fox")  returns x = "THE QUICK BROWN FOX"
string StringUpper(string str)
{
  string outstr = "";
  string lower  = "abcdefghijklmnopqrstuvwxyz";
  string upper  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for(int i=0; i<StringLen(str); i++)  {
    int t1 = StringFind(lower,StringSubstr(str,i,1),0);
    if (t1 >=0)  
      outstr = outstr + StringSubstr(upper,t1,1);
    else
      outstr = outstr + StringSubstr(str,i,1);
  }
  return(outstr);
}  
//+------------------------------------------------------------------+
//| GetPairTrends                                                    |
//+------------------------------------------------------------------+
void GetPairTrends(int &trend_symbol[][], color &trend_color[][])
{
	int i, j;
	double rectShort, rectLong, delta_val;
	
	for(i=0; i<NoOfPairs; i++)
	{
	  int signalsDown = 0;
	  int signalsUp   = 0;
	  
		for(j=0; j<NoOfPeriods; j++)
		{
			trend_symbol[i][j] = symbolCodeNoSignal;
			trend_color[i][j] = colorCodeNoSignal;
			int x = MathRand();
			rectLong  = iCustom(TradePair[i], TradePeriodTF[j],"_trickZones",false,x,0,0);
			rectShort = iCustom(TradePair[i], TradePeriodTF[j],"_trickZones",false,x,1,0);

			if ( rectLong != EMPTY_VALUE ){

				trend_symbol[i][j] = symbolCodeSUP;
				trend_color[i][j] = colorCodeSUP;
				signalsUp++;
			} 
			if ( rectShort != EMPTY_VALUE ){
				trend_symbol[i][j] = symbolCodeSDN;
				trend_color[i][j] = colorCodeSDN;
				signalsDown++;
			} 
	   } 	
	} 
	return;

}//End GetPairTrends(int &trend_symbol[][], color &trend_color[][])


//+------------------------------------------------------------------+
//| PrintPairTrends                                                    |
//+------------------------------------------------------------------+
void PrintPairTrends()
{
	int i, j;
	
	//Set Trade Pair
	for(i=0; i<NoOfPairs; i++)
	{
		buff_str = StringConcatenate(objPrefix, TradePair[i]);
		ObjectDelete(buff_str);
		ObjectCreate(buff_str,OBJ_LABEL,WindowNo,0,0,0,0);
		ObjectSet(buff_str,OBJPROP_CORNER,1);
		ObjectSet(buff_str,OBJPROP_XDISTANCE,DisplayStarts_X + FontSize*(NoOfPeriods*2));
		ObjectSet(buff_str,OBJPROP_YDISTANCE,DisplayStarts_Y + (i+1)*(FontSize+FontSize/2));
		ObjectSetText(buff_str,TradePair[i],FontSize-2,Font_Font,FontColour);
	}
	//Set Trade Period
	for(j=0; j<NoOfPeriods; j++)
	{
		buff_str = StringConcatenate(objPrefix, TradePeriod[j]);
		ObjectDelete(buff_str);
		ObjectCreate(buff_str,OBJ_LABEL,WindowNo,0,0,0,0);
		ObjectSet(buff_str,OBJPROP_CORNER,1);
		ObjectSet(buff_str,OBJPROP_XDISTANCE,DisplayStarts_X + (NoOfPeriods-1-j)*(FontSize*2));
		ObjectSet(buff_str,OBJPROP_YDISTANCE,DisplayStarts_Y);
		ObjectSetText(buff_str,TradePeriod[j],FontSize-4,Font_Font,FontColour);      
	}
	//Set Trade Trend
	for(i=0; i<NoOfPairs; i++)
	{
	   bool ignoreAlert = false;
	   for(int k=0; k<NoOfIgnores; k++){
         if ( AlertIgnorePairs[k] == TradePair[i] )
         {
            ignoreAlert=true;
         }
      }
		for(j=0; j<NoOfPeriods; j++)
		{
			buff_str = StringConcatenate(objPrefix, TradePair[i], TradePeriod[j]);
			if ( ObjectFind(0,buff_str) == 0) { 
			   color oldColor=color(ObjectGetInteger(0,buff_str,OBJPROP_COLOR));
			   if ( alertOn && ! ignoreAlert && (oldColor == colorCodeSUP || oldColor == colorCodeNoSignal) && TradeTrendColor[i][j] == colorCodeSDN){
			      Alert("Change down: ",TradePair[i], " - ", TradePeriod[j]);
			   }
			   if ( alertOn && ! ignoreAlert && (oldColor == colorCodeSDN || oldColor == colorCodeNoSignal) && TradeTrendColor[i][j] == colorCodeSUP){

			      Alert("Change up: ",TradePair[i], " - ", TradePeriod[j]);
			   }
			}

			ObjectDelete(buff_str);
			ObjectCreate(buff_str,OBJ_LABEL,WindowNo,0,0,0,0);
 			ObjectSet(buff_str,OBJPROP_CORNER,1);
			ObjectSet(buff_str,OBJPROP_XDISTANCE,DisplayStarts_X + (NoOfPeriods-1-j)*(FontSize*2));
			ObjectSet(buff_str,OBJPROP_YDISTANCE,DisplayStarts_Y + (i+1)*(FontSize+FontSize/2));
			ObjectSetText(buff_str,CharToStr(TradeTrendSymbol[i][j]),FontSize,"Wingdings",TradeTrendColor[i][j]);
		}
	}
	return;

}//End PrintPairTrends()




