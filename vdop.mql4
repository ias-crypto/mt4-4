#property strict
#property indicator_chart_window

extern int                 ZZdepth = 12;
extern int             ZZdeviation = 5;
extern int              ZZbackStep = 3;
extern bool         showOnlyActive = true;
extern int                 History = 2000;    
extern color            lineColor1 = clrBlack;
extern color            lineColor2 = clrRed;
extern int   maxRetraceStillActive = 50;
extern int    priceProximityToBase = 5;
extern bool          drawRectangle = true;

double       VdropShort[];
double       VdropLong[];

#property indicator_buffers 2


string name="vdrop-";
   
int init()                         
{
   IndicatorDigits(Digits);
   SetIndexBuffer(0,VdropLong);
   SetIndexLabel(0,"VLong");
   SetIndexBuffer(1,VdropShort);
   SetIndexLabel(1,"VShort");
   
   ArraySetAsSeries(VdropShort,true);
   ArrayInitialize(VdropShort,0.0);
   ArraySetAsSeries(VdropLong,true);
   ArrayInitialize(VdropLong,0.0);
   
   return(0);              
}

int deinit()
{
   int k=0;
   while ( k < ObjectsTotal() )
   {
      string objname = ObjectName(k);
      if (StringSubstr(objname,0,StringLen(name)) == name) 
         ObjectDelete(objname);
      else
         k++;
   } 
   return(0);   
}
  

int start()   
{
   int i,j, Counted_bars;
   double zig,A,B,C,D = 0.0;
   int Bi,Ci,Di = 0;
 
   Counted_bars=IndicatorCounted(); 
   i=Bars-Counted_bars-1;
   if (i>History-1)
   {                 
      i=History-1;                  
   }
   
   while (i>=0)
   {
      j=i;
      while (A==0.0 && j<=History){
         zig=iCustom(NULL, 0, "ZigZag", ZZdepth, ZZdeviation, ZZbackStep, 0, j);
         if ( zig > 0.0 )
         {
            if ( D == 0.0 ) 
            {
               D=zig;
               Di=j;
            }
            else if ( C == 0.0 ) 
            {
               C=zig;
               Ci=j;
            }
            else if ( B == 0.0 ) 
            {
               B=zig;
               Bi=j;
            }
            else if ( A == 0.0 ) 
            {
               A=zig;
            }
         }   
         j++;
      }
      if ( A != 0.0 )
      {
         bool VdropFound = false;
         bool isLong;
         
         // V-drop
         if ( C < A && D > B && C < B /*&& (Bi-Ci > Ci-Di)*/) 
         {
            isLong = true;
            // check for active
            if ( showOnlyActive )
            {
               double val;
               int val_index=iLowest(NULL,0,MODE_LOW,Di,0);
               if(val_index!=-1) val=Low[val_index];
               else return 0;
               if ( val >= (B+C)/2 ) VdropFound = true;
            }
            else 
            {
               VdropFound = true;
            }
            
         }
         
         // A-drop
         if ( A < C && B > D && C > B /*&& (Bi-Ci > Ci-Di)*/)
         {
            isLong = false;
            // check for active
            if ( showOnlyActive )
            {
               double val;
               int val_index=iHighest(NULL,0,MODE_HIGH,Di,0);
               if(val_index!=-1) val=High[val_index];
               else return 0;
               if ( val <= (C+B)/2 ) VdropFound = true;
            }
            else 
            {
               VdropFound = true;
            }
         }
         
         
         if ( VdropFound )
         {
            color lineColor;
            int rectHigh, rectLow;
            int DiPlus = Di;
            
            if ( isLong ) {
               lineColor = lineColor1;
               for (int k = Ci; k >= Di; k--)
               {
                  if ( High[k] > B ){ // Candle crossed up the V-drop line
                     if ( iLowest(NULL,0,MODE_LOW,k-Di,Di) > B || k-Di < 2 )
                     {
                        for ( int l=Di;l>=0;l--)
                        {
                           if ( High[l] > High[Di] ){
                              DiPlus=l;
                           }
                        }
                     }
                     rectLow = iLowest(NULL,0,MODE_LOW,k-DiPlus+1,DiPlus);
                     rectHigh = iHighest(NULL,0,MODE_HIGH,k-rectLow+1,rectLow);
                     for (int m=rectLow;m>=0;m--)
                     {
                        VdropLong[m] = iHigh(NULL,0,rectHigh);
                     }
                     break;
                  }
               }
            } else{
               lineColor = lineColor2;
               for (int k = Ci; k >= Di; k--)
               {
                  if ( Low[k] < B ){ // Candle crossed down the V-drop line
                     if ( iHighest(NULL,0,MODE_HIGH,k-Di,Di) < B || k-Di < 2 )
                     {
                        for ( int l=Di;l>=0;l--)
                        {
                           if ( Low[l] < Low[Di] ){
                              DiPlus=l;
                           }
                        }
                     }
                     rectHigh = iHighest(NULL,0,MODE_HIGH,k-DiPlus+1,DiPlus);
                     rectLow = iLowest(NULL,0,MODE_LOW,k-rectHigh+1,rectHigh);
                     for (int m=rectHigh;m>=0;m--)
                     {
                        VdropShort[m] = iLow(NULL,0,rectLow);
                     }
                     break;
                  }
               }
            }
            
            
            TrendCreate(0,name+"tl"+TimeToStr(Time[Bi]),0,Time[Bi],B,Time[Di],B,lineColor,STYLE_SOLID,2,true,false,false,false,false,0);
            if ( drawRectangle )
            {
              RectangleCreate(0,name+"rt"+TimeToStr(Time[Bi]),0,Time[rectLow]<Time[rectHigh]?Time[rectLow]:Time[rectHigh],iHigh(NULL,0,rectHigh),Time[0],iLow(NULL,0,rectLow),lineColor,STYLE_DOT,1,false,false,0);
            }
            
         }
         
      }
      
      zig = 0.0;
      A = 0.0;
      B = 0.0;
      C = 0.0;
      D = 0.0;
      
      i--;
   }
   return(0);
}


bool TrendCreate(const long            chart_ID=0,        
                 const string          name="TrendLine",  
                 const int             sub_window=0,      
                 datetime              time1=0,           
                 double                price1=0,          
                 datetime              time2=0,           
                 double                price2=0,          
                 const color           clr=clrRed,        
                 const ENUM_LINE_STYLE style=STYLE_SOLID, 
                 const int             width=1,           
                 const bool            back=false,        
                 const bool            selection=true,    
                 const bool            ray_left=false,    
                 const bool            ray_right=false,   
                 const bool            hidden=true,       
                 const long            z_order=0)         
{  
   ResetLastError();
   
   if (ObjectFind(name) == -1)
      ObjectCreate(chart_ID,name,OBJ_TREND,sub_window,time1,price1,time2,price2);
   
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);             
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);           
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);           
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);             
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);  
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);    
                                                                  
                                                                  
   ObjectSetInteger(chart_ID,name,OBJPROP_RAY_LEFT,ray_left);     
   ObjectSetInteger(chart_ID,name,OBJPROP_RAY_RIGHT,ray_right);   
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);         
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);        

   return(true);
}

bool RectangleCreate(const long            chart_ID=0,        
                     const string          name="Rectangle",  
                     const int             sub_window=0,      
                     datetime              time1=0,           
                     double                price1=0,          
                     datetime              time2=0,           
                     double                price2=0,          
                     const color           clr=clrRed,        
                     const ENUM_LINE_STYLE style=STYLE_SOLID, 
                     const int             width=1,           
                     const bool            fill=false,        
                     const bool            back=false,        
                     const bool            selection=true,    
                     const bool            hidden=true,       
                     const long            z_order=0)         
{
   
   ResetLastError();
   
   if (ObjectFind(name) == -1)
      ObjectCreate(chart_ID,name,OBJ_RECTANGLE,sub_window,time1,price1,time2,price2);

   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);             
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);           
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);           
   ObjectSetInteger(chart_ID,name,OBJPROP_FILL,fill);             
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);             
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);  
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);    
                                                                  
                                                                  
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);         
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);        

   return(true);
}
